name: Build EchoTap

on:
  push:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        allow-prereleases: false
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
    
    - name: Build application
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: echotap-windows
        path: dist/*.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        allow-prereleases: false
    
    - name: Install system dependencies (macOS)
      run: |
        # Update Homebrew
        brew update
        
        # Install build dependencies
        brew install cmake portaudio pkg-config
        
        # Set environment variables for PortAudio
        echo "PORT_AUDIO_INCLUDE_DIR=$(brew --prefix portaudio)/include" >> $GITHUB_ENV
        echo "PORT_AUDIO_LIBRARY_DIR=$(brew --prefix portaudio)/lib" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$(brew --prefix portaudio)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix portaudio)/include" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix portaudio)/lib" >> $GITHUB_ENV
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m venv venv
        source venv/bin/activate
        
        # Set environment variables for PortAudio (modern approach)
        export CFLAGS="-I$(brew --prefix portaudio)/include"
        export LDFLAGS="-L$(brew --prefix portaudio)/lib"
        export PKG_CONFIG_PATH="$(brew --prefix portaudio)/lib/pkgconfig:$PKG_CONFIG_PATH"
        
        # Install PyAudio with environment variables
        echo "Installing PyAudio with PortAudio environment variables..."
        pip install --upgrade pip wheel setuptools
        pip install pyaudio --verbose --no-cache-dir || {
          echo "Standard installation failed, trying with explicit compiler flags..."
          
          # Alternative: Use pip install with build environment
          pip install --no-binary=pyaudio pyaudio --verbose --no-cache-dir || {
            echo "Building PyAudio from source with explicit setup..."
            
            # Create a temporary setup.cfg for PyAudio
            echo "[build_ext]" > setup.cfg
            echo "include_dirs = /opt/homebrew/include" >> setup.cfg
            echo "library_dirs = /opt/homebrew/lib" >> setup.cfg
            echo "libraries = portaudio" >> setup.cfg
            
            # Install with custom setup.cfg
            pip install pyaudio --verbose --no-cache-dir
            rm -f setup.cfg
          }
        }
        
        # Install other dependencies
        pip install -r requirements.txt --verbose --no-deps
    
    - name: Build application
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: echotap-macos
        path: dist/*.dmg

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        allow-prereleases: false
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev build-essential cmake pkg-config
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
    
    - name: Build application
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: echotap-linux
        path: dist/*.AppImage

  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        allow-prereleases: false
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
    
    - name: Run frontend tests
      run: npm run test:frontend
    
    - name: Run backend tests
      run: npm run test:backend