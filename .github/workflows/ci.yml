name: CI Build Check

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.idea'
      - '.vscode'
      - '.gitignore'
      - '.github/**'
      - '!.github/workflows/ci.yml'
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.idea'
      - '.vscode'
      - '.gitignore'

jobs:
  build:
    name: Build Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install System Dependencies
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install portaudio cmake
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y portaudio19-dev python3-dev cmake build-essential
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows: CMake and build tools are handled by setup-python and pip
            echo "Windows build dependencies handled by pip"
          fi
        shell: bash

      - name: Create CI Requirements File
        run: |
          cd backend
          # Create a requirements file without llama-cpp-python for CI
          grep -v "^llama-cpp-python" requirements.txt > requirements-ci.txt
          echo "Created CI requirements file without llama-cpp-python:"
          cat requirements-ci.txt
        shell: bash

      - name: Install Python Dependencies  
        run: |
          python -m pip install --upgrade pip
          cd backend
          python -m venv venv
          
          # Activate virtual environment based on OS
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          
          # Install build dependencies
          pip install --upgrade pip wheel setuptools
          
          # Install core dependencies (excluding llama-cpp-python for CI)
          pip install -r requirements-ci.txt --verbose
          
          echo "✅ Core Python dependencies installed successfully"
        shell: bash

      - name: Install Node Dependencies
        run: npm install

      - name: Build Frontend
        run: npm run build:renderer

      - name: Validate Python Backend
        run: |
          cd backend
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          
          # Test basic imports (excluding summarization which needs llama-cpp-python)
          python -c "
          try:
              import fastapi
              import uvicorn
              import numpy
              import aiosqlite
              print('✅ Core Python backend dependencies importable')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              exit(1)
          "
        shell: bash

      - name: Validate Electron Configuration
        run: |
          node -e "console.log('✅ Main entry point exists:', require('fs').existsSync('src/main/main.js'))"
          node -e "const pkg = require('./package.json'); console.log('✅ Package.json main:', pkg.main)"
          node -e "console.log('✅ Build config valid:', !!require('./package.json').build)"