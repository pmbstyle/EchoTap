name: CI Build Check

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.idea'
      - '.vscode'
      - '.gitignore'
      - '.github/**'
      - '!.github/workflows/ci.yml'

jobs:
  build:
    name: Build Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          allow-prereleases: false

      - name: Install System Dependencies
        run: |
          # Check system Python version
          echo "System Python version: $(python3 --version 2>/dev/null || echo 'Python3 not found')"
          echo "System Python path: $(which python3 2>/dev/null || echo 'Python3 not found')"
          
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Update Homebrew
            brew update
            
            # Install build dependencies
            brew install cmake portaudio pkg-config
            
            # Set environment variables for PortAudio
            echo "PORT_AUDIO_INCLUDE_DIR=$(brew --prefix portaudio)/include" >> $GITHUB_ENV
            echo "PORT_AUDIO_LIBRARY_DIR=$(brew --prefix portaudio)/lib" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=$(brew --prefix portaudio)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
            echo "CPPFLAGS=-I$(brew --prefix portaudio)/include" >> $GITHUB_ENV
            echo "LDFLAGS=-L$(brew --prefix portaudio)/lib" >> $GITHUB_ENV
            
            # Verify PortAudio installation
            echo "PortAudio include directory: $(brew --prefix portaudio)/include"
            echo "PortAudio library directory: $(brew --prefix portaudio)/lib"
            ls -la "$(brew --prefix portaudio)/include/portaudio.h" || echo "PortAudio header not found!"
            
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y portaudio19-dev python3-dev cmake build-essential pkg-config
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows: CMake and build tools are handled by setup-python and pip
            echo "Windows build dependencies handled by pip"
          fi
        shell: bash

      - name: Verify PortAudio Installation (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Verifying PortAudio installation..."
          echo "PortAudio version: $(brew list portaudio --versions)"
          echo "PortAudio include path: $(brew --prefix portaudio)/include"
          echo "PortAudio lib path: $(brew --prefix portaudio)/lib"
          
          # Test if we can find the header file
          if [ -f "$(brew --prefix portaudio)/include/portaudio.h" ]; then
            echo "✅ PortAudio header found"
            echo "Header file contents (first 10 lines):"
            head -10 "$(brew --prefix portaudio)/include/portaudio.h"
          else
            echo "❌ PortAudio header not found"
            echo "Contents of include directory:"
            ls -la "$(brew --prefix portaudio)/include/" || echo "Include directory not found"
            exit 1
          fi
          
          # Test pkg-config
          if command -v pkg-config >/dev/null 2>&1; then
            echo "PortAudio pkg-config info:"
            pkg-config --cflags --libs portaudio || echo "pkg-config portaudio failed"
          fi
          
          # Verify Homebrew paths
          echo "Homebrew prefix: $(brew --prefix)"
          echo "Homebrew Cellar: $(brew --cellar)"
        shell: bash

      - name: Create CI Requirements File
        run: |
          cd backend
          # Create a requirements file without llama-cpp-python for CI
          grep -v "^llama-cpp-python" requirements.txt > requirements-ci.txt
          echo "Created CI requirements file without llama-cpp-python:"
          cat requirements-ci.txt
        shell: bash

      - name: Install Python Dependencies  
        run: |
          # Verify Python version
          echo "Python version: $(python --version)"
          echo "Python executable: $(which python)"
          
          python -m pip install --upgrade pip
          cd backend
          python -m venv venv
          
          # Activate virtual environment and install dependencies based on OS
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows: Use the venv python directly to avoid pip modification issues
            venv/Scripts/python.exe -m pip install --upgrade pip wheel setuptools
            venv/Scripts/python.exe -m pip install -r requirements-ci.txt --verbose
          else
            # Unix systems: Use standard activation
            source venv/bin/activate
            
            # Verify Python version in venv
            echo "Virtual environment Python version: $(python --version)"
            
            # For macOS, use modern 2025 approach for PyAudio
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              pip install --upgrade pip wheel setuptools
              
              # Set environment variables for PortAudio (modern approach)
              export CFLAGS="-I$(brew --prefix portaudio)/include"
              export LDFLAGS="-L$(brew --prefix portaudio)/lib"
              export PKG_CONFIG_PATH="$(brew --prefix portaudio)/lib/pkgconfig:$PKG_CONFIG_PATH"
              
              # Try to install PyAudio with environment variables
              echo "Installing PyAudio with PortAudio environment variables..."
              pip install pyaudio --verbose --no-cache-dir || {
                echo "Standard installation failed, trying with explicit compiler flags..."
                
                # Alternative: Use pip install with build environment
                pip install --no-binary=pyaudio pyaudio --verbose --no-cache-dir || {
                  echo "Building PyAudio from source with explicit setup..."
                  
                  # Create a temporary setup.cfg for PyAudio
                  cat > setup.cfg << 'EOF'
[build_ext]
include_dirs = /opt/homebrew/include
library_dirs = /opt/homebrew/lib
libraries = portaudio
EOF
                  
                  # Install with custom setup.cfg
                  pip install pyaudio --verbose --no-cache-dir
                  rm -f setup.cfg
                }
              }
              
              # Install other dependencies
              pip install -r requirements-ci.txt --verbose --no-deps
            else
              pip install --upgrade pip wheel setuptools
              pip install -r requirements-ci.txt --verbose
            fi
          fi
          
          echo "✅ Core Python dependencies installed successfully"
        shell: bash

      - name: Install Node Dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: Validate Python Backend
        run: |
          cd backend
          
          # Test basic imports (excluding summarization which needs llama-cpp-python)
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            venv/Scripts/python.exe -c "import fastapi, uvicorn, numpy, aiosqlite; print('Core Python backend dependencies importable')"
          else
            source venv/bin/activate
            python -c "import fastapi, uvicorn, numpy, aiosqlite; print('Core Python backend dependencies importable')"
          fi
        shell: bash

      - name: Validate Electron Configuration
        run: |
          node -e "console.log('Main entry point exists:', require('fs').existsSync('src/main/main.js'))"
          node -e "const pkg = require('./package.json'); console.log('Package.json main:', pkg.main)"
          node -e "console.log('Build config valid:', !!require('./package.json').build)"
          node -e "console.log('Dist-electron main exists:', require('fs').existsSync('dist-electron/main/index.js'))"
          node -e "console.log('Dist-electron preload exists:', require('fs').existsSync('dist-electron/preload/preload.js'))"

      - name: Test Dev Command (Dry Run)
        run: |
          # Test that the dev command can start without errors (timeout after 10 seconds)
          timeout 10s npm run dev || echo "Dev command started successfully (timed out as expected)"